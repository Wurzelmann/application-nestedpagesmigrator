<?xml version="1.0" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc version="1.2" reference="NestedPagesMigration.WebHome" locale="">
  <web>NestedPagesMigration</web>
  <name>WebHome</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <creationDate>1252454400000</creationDate>
  <!-- Set itself as parent so this page will not be migrated! -->
  <parent>NestedPagesMigration.WebHome</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <date>1452784366000</date>
  <contentUpdateDate>1452783789000</contentUpdateDate>
  <version>1.1</version>
  <title>Nested Pages Migration</title>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>false</hidden>
  <content>{{velocity}}
#if (!$services.security.authorization.hasAccess('admin', $xcontext.userReference, $doc.documentReference.wikiReference))
  {{error}}
  You don't have the right to use this tool on this wiki. You need to be administrator.
  {{/error}}
#else
## Both job.css and extension.css are needed because the ui-progress classes that we need to display
## a progress bar are in one of these 2 files depending on the XWiki version
#set ($discard = $xwiki.ssfx.use('uicomponents/job/job.css', true))
#set ($discard = $xwiki.ssfx.use('uicomponents/extension/extension.css', true))
#set ($discard = $xwiki.ssfx.use('uicomponents/logging/logging.css', true))
{{html clean="false"}}
&lt;!------------------------------------------
  Migration Action Template 
  -------------------------------------------&gt;
&lt;script id="MigrationActionTemplate" type="text/html"&gt;
  &lt;li data-bind="visible: !targetDocument.equals(sourceDocument) || getNumberOfChildren() &gt; 0"&gt;
    &lt;input type="checkbox" data-bind="checked: enabled" /&gt;
    &lt;a href="#" data-bind="visible: !enabled() &amp;&amp; (getNumberOfChildren() &gt; 0 || rights.length &gt; 0 || preferences.length &gt; 0), click: enableWithChildren" &gt;(all)&lt;/a&gt;
    &lt;strong class="documentName" data-bind="text: getTargetName(), click: toggleDisplayChildren" /&gt;
    [&lt;span data-bind="text: serializedTargetDocument()" class="monospace" /&gt;]
    &lt;em data-bind="visible: targetDocument.equals(sourceDocument)"&gt;(unchanged)&lt;/em&gt;
    &lt;button class="btn btn-default btn-xs" data-bind="click: ${escapetool.d}root.excludePage, disable: targetDocument.equals(sourceDocument)"&gt;exclude page&lt;/button&gt;
    &lt;button class="btn btn-default btn-xs" data-bind="click: ${escapetool.d}root.excludeSpace"&gt;exclude space&lt;/button&gt;
    &lt;button class="btn btn-default btn-xs" data-bind="click: ${escapetool.d}root.setParent"&gt;set parent&lt;/button&gt;
    (&lt;span data-bind="text: getNumberOfChildren()" /&gt; children)
    from &lt;a target="_blank" class="monospace" data-bind="text: serializedSourceDocument(), attr: {href: getSourceLink()}" /&gt;
    &lt;!-- ko if: displayChildren() --&gt;
      &lt;!-- ko if: preferences.length &gt; 0 --&gt;
        &lt;ul  data-bind="foreach: preferences"&gt;
          &lt;li class="text-warning"&gt;&lt;input type="checkbox" data-bind="checked: enabled"/&gt; &lt;strong&gt;[Preferences] &lt;span data-bind="text: property" /&gt; : &lt;span data-bind="text: value" /&gt;&lt;/strong&gt; (coming from &lt;a target="_blank" class="monospace" data-bind="text: getSerializedOrigin(), attr: {href: getOriginLink()}" /&gt;)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;!-- /ko --&gt;
      &lt;!-- ko if: rights.length &gt; 0 --&gt;
        &lt;ul  data-bind="foreach: rights"&gt;
          &lt;li class="text-danger"&gt;&lt;input type="checkbox" data-bind="checked: enabled"/&gt; &lt;strong&gt;[Right] &lt;span data-bind="text: toString()" /&gt;&lt;/strong&gt; (coming from &lt;a target="_blank" class="monospace" data-bind="text: getSerializedOrigin(), attr: {href: getOriginLink()}" /&gt;)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;!-- /ko --&gt;
      &lt;ul data-bind="template: { name: 'MigrationActionTemplate', foreach: children }" /&gt;
    &lt;!-- /ko --&gt;
  &lt;/li&gt;
&lt;/script&gt;
&lt;!------------------------------------------
  Display Logs
  -------------------------------------------&gt;
&lt;script id="DisplayLogs" type="text/html"&gt;
  &lt;h2 class="log-title"&gt;Logs: &lt;/h2&gt;
  &lt;ul class="log" data-bind="if: logs().length &gt; 0"&gt;
    &lt;!-- ko foreach: logs --&gt;
    &lt;li class="log-item" data-bind="css: getClass()"&gt;
      &lt;div data-bind="text: message" /&gt;
    &lt;/li&gt;
    &lt;!-- /ko --&gt;
  &lt;/ul&gt;
&lt;/script&gt;
&lt;!------------------------------------------
  Display plan
  -------------------------------------------&gt;
&lt;script id="DisplayPlan" type="text/html"&gt;
  &lt;h2&gt;Plan&lt;/h2&gt;
  &lt;div class="migration-plan box"&gt;
    &lt;div data-bind="if: isComputing()" id="planComputing"&gt;
      &lt;p&gt;The plan is being computed and it could take some time. Please wait...&lt;/p&gt;
      &lt;div class="ui-progress-background"&gt;
        &lt;div class="ui-progress-bar green" data-bind="style: {width: progress() + '%'}" /&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;ul data-bind="if: actions() &amp;&amp; !isComputing() &amp;&amp; !isPlanEmpty()" id="planTree"&gt;
      &lt;!-- ko template: {name: 'MigrationActionTemplate', foreach: actions } --&gt;
      &lt;!-- /ko --&gt;
    &lt;/ul&gt;
    &lt;!-- ko if: !isComputing() &amp;&amp; isPlanEmpty() --&gt;
    &lt;div class="box infomessage"&gt;
      &lt;p&gt;There is nothing to do!&lt;/p&gt;
    &lt;/div&gt;
    &lt;!-- /ko --&gt;
    &lt;!-- ko template: {name: 'DisplayLogs', data: ${escapetool.d}root} --&gt;
    &lt;!-- /ko --&gt;
  &lt;/div&gt;
&lt;/Script&gt;
&lt;!------------------------------------------
  Display configuration
  -------------------------------------------&gt;
&lt;h2&gt;Configuration&lt;/h2&gt;
&lt;form class="xform"&gt;
  &lt;div class="row"&gt;
  &lt;div class="col-xs-12 col-md-6"&gt;
    &lt;dl&gt;
      &lt;!-- Exclude hidden pages --&gt;
      &lt;dt&gt;&lt;input type="checkbox" id="excludeHiddenPages" data-bind="checked: configuration.excludeHiddenPages"&gt; &lt;label for="excludeHiddenPages"&gt;Exclude hidden pages&lt;/label&gt;&lt;/dt&gt;
      &lt;dd&gt;&lt;span class="xHint"&gt;Most of the hidden pages are techinal content. Moving them can break applications.&lt;/span&gt;&lt;/dd&gt;
      &lt;!-- Exclude class pages --&gt;
      &lt;dt&gt;&lt;input type="checkbox" id="excludeClassPages" data-bind="checked: configuration.excludeClassPages"&gt; &lt;label for="excludeClassPages"&gt;Exclude pages having a class&lt;/label&gt;&lt;/dt&gt;
      &lt;dd&gt;&lt;span class="xHint"&gt;The pages are technical and moving them can break applications.&lt;/span&gt;&lt;/dd&gt;
      &lt;!-- Don't move children --&gt;
      &lt;dt&gt;&lt;input type="checkbox" id="dontMoveChildren" data-bind="checked: configuration.dontMoveChildren"&gt; &lt;label for="dontMoveChildren"&gt;Do not move children&lt;/label&gt;&lt;/dt&gt;
      &lt;dd&gt;&lt;span class="xHint"&gt;Only convert terminal pages to nested pages, without moving them under their parent.&lt;/span&gt;&lt;/dd&gt;
      &lt;!-- Add redirection --&gt;
      &lt;dt&gt;&lt;input type="checkbox" id="addRedirection" data-bind="checked: configuration.addRedirection"&gt; &lt;label for="addRedirection"&gt;Add redirection&lt;/label&gt;&lt;/dt&gt;
      &lt;dd&gt;&lt;span class="xHint"&gt;Add a redirection in the old location.&lt;/span&gt;&lt;/dd&gt;
      &lt;!-- Convert preferences --&gt;
      &lt;dt&gt;&lt;input type="checkbox" id="convertPreferences" data-bind="checked: configuration.convertPreferences"&gt; &lt;label for="convertPreferences"&gt;Convert preferences&lt;/label&gt;&lt;/dt&gt;
      &lt;dd&gt;&lt;span class="xHint"&gt;Make sure that the preferences applied on the page remain the same after the move, by dupplicating the preferences on the target document.&lt;/span&gt;&lt;/dd&gt;
      &lt;!-- Convert rights --&gt;
      &lt;dt&gt;&lt;input type="checkbox" id="convertRights" data-bind="checked: configuration.convertRights"&gt; &lt;label for="convertRights"&gt;Convert rights (experimental)&lt;/label&gt;&lt;/dt&gt;
      &lt;dd&gt;&lt;span class="xHint"&gt;Make sure that the rights applied on the page remain the same after the move &lt;span class="text-danger"&gt;(Currently bugged)&lt;/span&gt;.&lt;/span&gt;&lt;/dd&gt;
    &lt;/dl&gt;
  &lt;/div&gt;
  &lt;div class="col-xs-12 col-md-6"&gt;
    &lt;dl&gt;
      &lt;!-- Excluded Object Classes --&gt;
      &lt;dt&gt;&lt;label for="excludedObjectClasses" data-bind="click: toggleXClassList"&gt;Exclude classes&lt;/label&gt;&lt;/dt&gt;
      &lt;dd&gt;
        &lt;p class="xHint" data-bind="click: toggleXClassList"&gt;Exclude pages holding an object of one of the specified classes (separated by a coma ',').&lt;/p&gt;
        &lt;p&gt;&lt;textarea id="excludedObjectClasses" data-bind="textInput: configuration.excludedObjectClasses, click: showXClassList" data-xclasses="#foreach($class in $xwiki.classList)#if($velocityCount&gt;1),#end${class}#end"&gt;&lt;/textarea&gt;&lt;/p&gt;
        &lt;div data-bind="visible: xclassListVisible"&gt;
          &lt;a data-bind="click: hideXClassList" href="#"&gt;$services.icon.renderHTML('remove') Hide&lt;/a&gt;
          &lt;ul data-bind="foreach: {data: xclasses, as: 'xclass'}" style="list-style-type: none; padding: 0;"&gt;
            &lt;li&gt;&lt;label&gt;&lt;input type="checkbox" data-bind="checked: xclass.selected"/&gt; &lt;span data-bind="text: xclass.name" /&gt;&lt;/label&gt;&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/dd&gt;
    &lt;/dl&gt;
    &lt;dl&gt;
      &lt;!-- Excluded pages --&gt;
      &lt;dt&gt;&lt;label for="excludedPages"&gt;Excluded pages&lt;/label&gt;&lt;/dt&gt;
      &lt;dd&gt;
        &lt;p class="xHint"&gt;Page references separated by commas (',')&lt;/p&gt;
        &lt;p&gt;&lt;input type="text" id="excludedPages" data-bind="value: configuration.excludedPages"&gt;&lt;/p&gt;
      &lt;/dd&gt;
      &lt;!-- Excluded spaces --&gt;
      &lt;dt&gt;&lt;label for="excludedSpaces"&gt;Excluded spaces&lt;/label&gt;&lt;/dt&gt;
      &lt;dd&gt;
        &lt;p class="xHint"&gt;Space references separated by commas (',')&lt;/p&gt;
        &lt;p&gt;&lt;input type="text" id="excludedSpaces" data-bind="value: configuration.excludedSpaces"&gt; &lt;/p&gt;
      &lt;/dd&gt;
      &lt;!-- Included spaces --&gt;
      &lt;dt&gt;&lt;label for="includedSpaces"&gt;Included spaces&lt;/label&gt;&lt;/dt&gt;
      &lt;dd&gt;
        &lt;p class="xHint"&gt;Space references separated by commas (',')&lt;/p&gt;
        &lt;p&gt;&lt;input type="text" id="includedSpaces" data-bind="value: configuration.includedSpaces"&gt; &lt;/p&gt;
      &lt;/dd&gt;
    &lt;/dl&gt;
  &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="clearfix"&gt;
    &lt;h2&gt;Actions&lt;/h2&gt;
    &lt;button class="btn btn-primary" data-bind="click: computePlan, disable: isComputing() || isPlanExecuting()"&gt;Compute plan&lt;/button&gt;
    &lt;button class="btn btn-primary" data-bind="disable: actions().length == 0 || isPlanExecuting(), click: executePlan"&gt;Execute plan&lt;/button&gt;
  &lt;/div&gt;
&lt;/form&gt;
&lt;!------------------------------------------
  Display plan
  -------------------------------------------&gt;
&lt;div data-bind="if: isPlanRequested() &amp;&amp; !isPlanExecuting()"&gt;
  ## We escape the dollar of the knockout variable '$root' because $root also exists in velocity
  &lt;!-- ko template: {name: 'DisplayPlan', data: ${escapetool.d}root} --&gt;
  &lt;!-- /ko --&gt;
&lt;/div&gt;
&lt;!------------------------------------------
  Execute Plan
  -------------------------------------------&gt;
&lt;!-- ko if: isPlanExecuting() &amp;&amp; !success()--&gt;
&lt;div class="box" id="planExecuting"&gt;
  &lt;p&gt;The plan is being executed and it could take some time. Please wait...&lt;/p&gt;
  &lt;div class="ui-progress-background"&gt;
    &lt;div class="ui-progress-bar green" data-bind="style: {width: progress() + '%'}"&gt;&lt;/div&gt;
  &lt;/div&gt;
  &lt;!-- ko template: {name: 'DisplayLogs', data: ${escapetool.d}root} --&gt;
  &lt;!-- /ko --&gt;
&lt;/div&gt;
&lt;!-- /ko --&gt;
&lt;!------------------------------------------
  End message
  -------------------------------------------&gt;
&lt;!-- ko if: success() --&gt;
  &lt;div class="box successmessage" id="planExecuted"&gt;
  The plan have been executed!
  &lt;/div&gt;
  &lt;!-- ko template: {name: 'DisplayLogs', data: ${escapetool.d}root} --&gt;
  &lt;!-- /ko --&gt;
&lt;!-- /ko --&gt;
{{/html}}
#end
{{/velocity}}
</content>
  <object>
    <name>NestedPagesMigration.WebHome</name>
    <number>1</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>565cd161-a494-4916-bcd8-4e6252f6862f</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>require.config({
  paths: {
    #if ("$!request.minify" == false)
      'knockout': "$services.webjars.url('knockout', 'knockout.debug.js')"
    #else
      'knockout': "$services.webjars.url('knockout', 'knockout.js')"
    #end
  }
});</code>
    </property>
    <property>
      <name>Live view configuration</name>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>currentPage</use>
    </property>
  </object>
  <object>
    <name>NestedPagesMigration.WebHome</name>
    <number>2</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>dbfa6b73-0016-47ab-8bcf-7e3a67863b54</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>require(['jquery', 'xwiki-meta', 'knockout'], function ($, xm, ko) {
  'use strict';

  function localSerializer(document) {
    var documentReference = XWiki.Model.resolve(document, XWiki.EntityType.DOCUMENT).relativeTo(xm.documentReference.extractReference(XWiki.EntityType.WIKI));
    return XWiki.Model.serialize(documentReference);
  }
  
  function resolveLocally(document) {
    return XWiki.Model.resolve(document, XWiki.EntityType.DOCUMENT).relativeTo(xm.documentReference.extractReference(XWiki.EntityType.WIKI));
  }
  
  /**
   * Class representing a migration action
   */
  function MigrationAction(source, target, parent) {
    var self = this;
    
    self.parent          = parent;
    self.sourceDocument  = resolveLocally(source);
    self.targetDocument  = resolveLocally(target);
    self.children        = ko.observableArray();
    self.displayChildren = ko.observable(false);
    self.enabled         = ko.observable(true);
    self.preferences     = [];
    self.rights          = [];
    
    self.serializedSourceDocument = function () {
      return XWiki.Model.serialize(self.sourceDocument);
    };
    
    self.serializedTargetDocument = function () {
      return XWiki.Model.serialize(self.targetDocument);
    };
    
    self.getNumberOfChildren = function () {
      var number = self.children().length;
      for (var i = 0; i &lt; self.children().length; ++i) {
        number += self.children()[i].getNumberOfChildren();
      }
      return number;
    };
    
    self.getTargetName = function () {
      return self.targetDocument.getName() == 'WebHome' ? self.targetDocument.parent.getName() : self.targetDocument.getName();
    }
    
    self.getSourceLink = function () {
      return new XWiki.Document(self.sourceDocument).getURL();
    }
    
    self.toggleDisplayChildren = function() {
      self.displayChildren(!self.displayChildren());
    }
    
    self.disableChildren = function () {
      for (var i = 0; i &lt; self.children().length; ++i) {
        self.children()[i].enabled(false);
      }
      for (var i = 0; i &lt; self.preferences.length; ++i) {
        self.preferences[i].enabled(false);
      }
      for (var i = 0; i &lt; self.rights.length; ++i) {
        self.rights[i].enabled(false);
      }
    };
    
    self.enabled.subscribe(function (newValue) {
      if (!newValue) {
        self.disableChildren();
      }
    });
    
    self.enableWithChildren = function() {
      self.enabled(true);
      for (var i = 0; i &lt; self.preferences.length; ++i) {
        self.preferences[i].enabled(true);
      }
      for (var i = 0; i &lt; self.rights.length; ++i) {
        self.rights[i].enabled(true);
      }
      for (var i = 0; i &lt; self.children().length; ++i) {
        self.children()[i].enableWithChildren();
      }
    }
  }
  
  /**
   * Class representing a preference.
   */
  function Preference(property, value, origin) {
    var self = this;
    
    self.property = property;
    self.value    = value;
    self.origin   = origin;
    self.enabled  = ko.observable(true);
    
    self.getSerializedOrigin = function () {
      return localSerializer(self.origin);
    };
    
    self.getOriginLink = function () {
      return new XWiki.Document(resolveLocally(self.origin)).getURL('admin');
    };
  }
  
  /**
   * Class representing a right.
   */
  function Right(user, group, level, allow, origin) {
    var self = this;
    
    self.user   = user;
    self.group  = group;
    self.level  = level;
    self.allow  = allow;
    self.origin = origin;
    self.enabled  = ko.observable(true);
    
    self.getType = function () {
      return self.user ? 'user' : 'group';
    };
    
    self.getTarget = function () {
      return self.user ? self.user : self.group;
    };
    
    self.getAllow = function () {
      return self.allow ? 'allow' : 'deny';
    };
    
    self.toString = function () {
      return self.getType() + ' : ' + self.getTarget() + ', ' + self.level + ' : ' + self.getAllow();
    };
    
    self.getSerializedOrigin = function () {
      return localSerializer(self.origin);
    };
    
    self.getOriginLink = function () {
      var ref = resolveLocally(self.origin);
      return new XWiki.Document(ref).getURL('admin', ref.name == 'WebPreferences' ? 'section=PageAndChildrenRights' : 'section=Rights');
    };
  }

  /**
   * Class holding the configuration used to compute the plan.
   */
  function AppConfiguration() {
    this.excludeHiddenPages    = ko.observable(true);
    this.excludeClassPages     = ko.observable(true);
    this.dontMoveChildren      = ko.observable(false);
    this.addRedirection        = ko.observable(true);
    this.convertPreferences    = ko.observable(true);
    this.convertRights         = ko.observable(false);
    this.excludedPages         = ko.observable('');
    this.excludedSpaces        = ko.observable('XWiki,Admin,NestedPagesMigration');
    this.includedSpaces        = ko.observable('');
    this.excludedObjectClasses = ko.observable('XWiki.XWikiUsers,XWiki.XWikiSkins,Panels.PanelClass,Blog.BlogClass,Blog.BlogPostClass,Blog.CategoryClass,ColorThemes.ColorThemeClass,FlamingoThemesCode.ThemeClass,IconThemesCode.IconThemeClass,XWiki.SchedulerJobClass,Menu.MenuClass,XWiki.RedirectClass');
    this.excludedObjectClasses.extend({ notify: 'always' });
  }
      
  function getExcludedClassesArray(model) {
    return model.configuration.excludedObjectClasses().split(',');
  }
  
  function inExcludedClassesArray(name, model) {
    return $.inArray(name, getExcludedClassesArray(model)) &gt;= 0;
  }
  
  function appendToString(string, toAppend) {
    var result = string;
    if (result.length &gt; 0) {
      result += ',';
    }
    result += toAppend;
    return result;
  }
  
  function computeNewExcludedClassesList(name, value, model) {
    var newList = '';
    var oldList = getExcludedClassesArray(model);
    // We walk through the old list to respect the order written in it to avoid a WTF effect
    for (var i = 0; i &lt; oldList.length; ++i) {
      if (oldList[i] != name) {
        newList = appendToString(newList, oldList[i]);
      }
    }
    if (value) {
      newList = appendToString(newList, name);
    }
    model.configuration.excludedObjectClasses(newList);
  }
  
  function initXClassCheckbox(name, model) {
    var selected = ko.computed({
      read: function () {
        return inExcludedClassesArray(name, model);
      },
      write: function (value) {
        computeNewExcludedClassesList(name, value, model);
      }
    });
    return {'name': name, 'selected': selected};
  }

  /**
   * Represents a log entry.
   */
  function Log(message, level) {
    var self = this;
    
    self.message = message;
    self.level   = level;
    
    self.getClass = function () {
      return 'log-item-' + self.level.toLowerCase();
    }
  }

  /**
   * The model of the application. All data and functions used by the application view are stored here.
   */
  function AppViewModel() {
    var self = this;
    
    // Fields
    self.configuration     = new AppConfiguration();
    self.actions           = ko.observableArray();
    self.isPlanRequested   = ko.observable(false);
    self.isComputing       = ko.observable(false);
    self.xclasses          = ko.observableArray();
    self.xclassListVisible = ko.observable(false);
    self.jobId             = false;
    self.progress          = ko.observable(0);
    self.logs              = ko.observableArray();
    self.isPlanExecuting   = ko.observable(false);
    self.success           = ko.observable(false);
    
    self.toggleXClassList = function () {
      self.xclassListVisible(!self.xclassListVisible());
    }
    
    self.showXClassList = function () {
      self.xclassListVisible(true);
    }
    
    self.hideXClassList = function () {
      self.xclassListVisible(false);
    }
    
    self.getExcludedClassesArray = function () {
      return self.configuration.excludedObjectClasses().split(',');
    }
    
    self.inExcludedClassesArray = function() {
      return $.inArray(name, self.getExcludedClassesArray()) &gt;= 0;
    }
    
    self.computeNewExcludedClassesList = function (name, value) {
      var newList = '';
      var oldList = self.getExcludedClassesArray();
      // We walk through the old list to respect the order written in it to avoid a WTF effect
      for (var i = 0; i &lt; oldList.length; ++i) {
        if (oldList[i] != name) {
          if (newList.length &gt; 0) {
            newList += ',';
          }
          newList += oldList[i];
        }
      }
      if (value) {
        if (newList.length &gt; 0) {
          newList += ',';
        }
        newList += name;;
      }
      self.configuration.excludedObjectClasses(newList);
    }
    
    self.initXClassCheckbox = function (name) {
      var selected = ko.computed({
        read: function () {
          return inExcludedClassesArray(name, self);
        },
        write: function (value) {
          computeNewExcludedClassesList(name, value, self);
        }
      });
      return {'name': name, 'selected': selected};
    }
    
    /**
     * Initialize the XClasses fields.
     */
    self.initXClasses = function() {
      var xclasses = $('#excludedObjectClasses').attr('data-xclasses').split(',');
      for (var i = 0; i &lt; xclasses.length; ++i) {
        self.xclasses.push(initXClassCheckbox(xclasses[i], self));
      }
    }

    /**
     * Computed observable variable that returns if the plan is empty.
     */
    self.isPlanEmpty = ko.computed(function () {
      return self.actions().length == 0;
    });

    /**
     * Send an ajax request to start a new job for the creation of a plan.
     */
    self.computePlan = function() {
      self.progress(0);
      self.isPlanRequested(true);
      self.isComputing(true);
      self.actions.removeAll();
      $.getJSON(new XWiki.Document('Service', 'NestedPagesMigration').getURL('get', 'outputSyntax=plain'), {
          'action'               : 'createPlan',
          'excludeHiddenPages'   : self.configuration.excludeHiddenPages(),
          'excludeClassPages'    : self.configuration.excludeClassPages(),
          'dontMoveChildren'     : self.configuration.dontMoveChildren(),
          'addRedirection'       : self.configuration.addRedirection(),
          'convertPreferences'   : self.configuration.convertPreferences(),
          'convertRights'        : self.configuration.convertRights(),
          'excludedPages'        : self.configuration.excludedPages(),
          'excludedSpaces'       : self.configuration.excludedSpaces(),
          'includedSpaces'       : self.configuration.includedSpaces(),
          'excludedObjectClasses': self.configuration.excludedObjectClasses()
        }).done(function (data) {
          self.jobId = data.jobId;
          self.getJobStatus(function() { self.getMigrationPlan(); });
          self.getJobLogs();
        }).fail(function () {
          console.log('ERROR: Failed to start a new plan computation.');
        });
    };

    /**
     * Perform an AJAX request to get the current job status, so we can update progress the bar.
     */
    self.getJobStatus = function (successCallback) {
      var restURLPrefix = xm.restURL.substring(0, xm.restURL.indexOf('/rest/') + 6);
      var jobURL = restURLPrefix + 'jobstatus/' + self.jobId + '?media=json';
      $.getJSON(jobURL).done(function (data) {
        var state = data.state;
        if (state == 'FINISHED') {
          self.progress(100);
          if (successCallback) {
            successCallback();
          }
        } else if (state == 'RUNNING' || state == 'NONE') {
          self.progress(data.progress.offset * 100);
          // retry in 0.5 seconds
          setTimeout(function() { self.getJobStatus(successCallback) }, 500);
        }
      });
    };

    /**
     * Perform an AJAX request to get the logs of the current job status.
     * Note: this is currently not used.
     */
    self.getJobLogs = function () {
      var restURLPrefix = xm.restURL.substring(0, xm.restURL.indexOf('/rest/') + 6);
      var jobURL = restURLPrefix + 'joblog/' + self.jobId + '?media=json';
      $.getJSON(jobURL).done(function (data) {
        var logs = data.logEvents;
        self.logs.removeAll();
        for (var i = 0; i &lt; logs.length; ++i) {
          self.logs.push(new Log(logs[i].formattedMessage, logs[i].level));
        }
        if (self.progress() &lt; 100) {
          // retry in 0.5 seconds
          setTimeout(self.getJobLogs, 500);
        }
      });
    }

    /**
     * Get the migration plan that have been computed, in order to display it.
     */
    self.getMigrationPlan = function () {
      $.getJSON(new XWiki.Document('Service', 'NestedPagesMigration').getURL('get', 'outputSyntax=plain'), {
        'action': 'printPlan'
      }).done(function (data) {
        console.log('INFO: Plan computed');
        var parseAction = function (data, parent) {
          var action = new MigrationAction(data.sourceDocument, data.targetDocument, parent);
          if (data.children) {
            for (var i = 0; i &lt; data.children.length; ++i) {
              action.children.push(parseAction(data.children[i], action));
            }
          }
          if (data.preferences) {
            for (var i = 0; i &lt; data.preferences.length; ++i) {
              action.preferences[action.preferences.length] = new Preference(data.preferences[i].name, data.preferences[i].value, data.preferences[i].origin);
            }
          }
          if (data.rights) {
            for (var i = 0; i &lt; data.rights.length; ++i) {
              action.rights[action.rights.length] = new Right(data.rights[i].user, data.rights[i].group, data.rights[i].level, data.rights[i].allow == "true", data.rights[i].origin)
            }
          }
          return action;
        };

        if (data) {
          for (var i = 0; i &lt; data.length; ++i) {
            self.actions.push(parseAction(data[i], false));
          }
        }
        // Plan is loaded
        self.isComputing(false);
        console.log('INFO: Plan have been parsed.');
      }).fail(function () {
        new XWiki.widgets.Notification('Failed to load the computed plan', 'error');
      });
    };
    
    /**
     * Called when the user click on the "exclude page" button.
     */
    self.excludePage = function() {
      var page = this.serializedSourceDocument();
      if (confirm('Are you sure to exclude the page ['+page+'] from the migration? The plan may be recomputed.')) {
        self.configuration.excludedPages(appendToString(self.configuration.excludedPages(), page));
        // Adding an exclusion can seriously change the plan (if children are moved), so we re-compute it
        if (!self.configuration.dontMoveChildren()) {
          self.computePlan();
        } else {
          var sourceDoc = this.sourceDocument;
          var detectAction = function (action) {
            return action.sourceDocument.equals(sourceDoc);
          };
          if (this.parent) {
            this.parent.children.remove(detectAction);
          } else {
            self.actions.remove(detectAction);
          }
        }
      }
    };

    /**
     * Called when the user click on the "exclude space" button.
     */
    self.excludeSpace = function() {
      var space = XWiki.Model.serialize(this.sourceDocument.extractReference(XWiki.EntityType.SPACE));
      if (confirm('Are you sure to exclude the space ['+space+'] from the migration? The plan will be recomputed.')) {
        self.configuration.excludedSpaces(appendToString(self.configuration.excludedSpaces(), space));
        self.computePlan();
      }
    };

    /**
     * Called when the user click on the "set parent" button.
     */
    self.setParent = function () {
      // The reference needs to be complete in order to use XWiki.Document#getRestURL()
      if (this.sourceDocument.getRoot().type != XWiki.EntityType.WIKI) {
        this.sourceDocument.appendParent(xm.documentReference.extractReference(XWiki.EntityType.WIKI))
      };
      // First get the current parent
      var restURL = new XWiki.Document(this.sourceDocument).getRestURL('', 'media=json');
      var notification = new XWiki.widgets.Notification('Getting information', 'inprogress');
      $.getJSON(restURL).done(function (data) {
        notification.hide();
        // Now ask the new parent to set
        var parent = prompt("Enter the fullName of the parent that you want to set: (this will be applied immediatly)", data.parent);
        if (parent) {
          notification = new XWiki.widgets.Notification('Saving...', 'inprogress');
          // Set the new parent using the REST API
          $.ajax(restURL, {
            dataType: 'json',
            data:   {'parent': parent},
            method: 'PUT'
          }).done(function(data) {
            // TODO: put something here, and handle error;
            self.computePlan();
          }).fail(function() {
            notification.replace(new XWiki.widgets.Notification('Failed to save the page.', 'error'));
          });
        }
      }).fail(function() {
        notification.replace(new XWiki.widgets.Notification('Failed to get the current parent of the page which may not exist.', 'error'));
      });
    };
    
    /**
     * Called when the user clicks on "execute plan"
     */
    self.executePlan = function () {
      if (!confirm('Are you sure? This operation cannot be undone.')) {
        return;
      }
      self.isPlanExecuting(true);
      self.progress(0);
      
      var getDisabledActions = function (action) {
        var disabledActions = '';
        if (!action.enabled()) {
          disabledActions += action.serializedSourceDocument() + '_page,';
        }
        for (var i = 0; i &lt; action.preferences.length; ++i) {
          var preference = action.preferences[i];
          if (!preference.enabled()) {
            disabledActions += action.serializedSourceDocument() + '_preference_' + i + ',';
          }
        }
        for (var i = 0; i &lt; action.rights.length; ++i) {
          var right = action.rights[i];
          if (!right.enabled()) {
            disabledActions += action.serializedSourceDocument() + '_right_' + i + ',';
          }
        }
        for (var i = 0; i &lt; action.children().length; ++i) {
          disabledActions += getDisabledActions(action.children()[i]);
        }
        return disabledActions;
      };
      
      var disabledActions = '';
      for (var i = 0; i &lt; self.actions().length; ++i) {
        var action = self.actions()[i];
        disabledActions += getDisabledActions(action);
      }
      
      $.ajax(new XWiki.Document('Service', 'NestedPagesMigration').getURL('get', 'outputSyntax=plain'), {
        'data': {
          'action'               : 'executePlan',
          'addRedirection'       : self.configuration.addRedirection(),
          'disabledActions'      : disabledActions
        },
        'method': 'POST',
        'data-type': 'json'
      }).done(function (data) {
        self.jobId = data.jobId;
        self.getJobStatus(function() { self.success(true); });
        self.logs.removeAll();
        self.getJobLogs();
      }).fail(function () {
        console.log('ERROR: Failed to execute the plan.');
      });
    }
    
    // Initialize the XClasses field.
    self.initXClasses();
    
  };

  // Activates knockout.js
  ko.applyBindings(new AppViewModel());
});
</code>
    </property>
    <property>
      <name>Live view</name>
    </property>
    <property>
      <parse>0</parse>
    </property>
    <property>
      <use>currentPage</use>
    </property>
  </object>
  <object>
    <name>NestedPagesMigration.WebHome</name>
    <number>0</number>
    <className>XWiki.StyleSheetExtension</className>
    <guid>b5d5a928-6d36-416b-9504-1d525373dc49</guid>
    <class>
      <name>XWiki.StyleSheetExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>6</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>3</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <contentType>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>contentType</name>
        <number>1</number>
        <prettyName>Content Type</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>CSS|LESS</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </contentType>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>2</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>5</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>4</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>#template('colorThemeInit.vm')

.migration-plan .documentName {
  cursor: pointer;
}

.log {
  background-color: $theme.pageContentBackgroundColor;
}

.log-title {
  text-transform: uppercase;
  font-size: 0.9em;
  font-weight: bold;
}</code>
    </property>
    <property>
      <contentType>CSS</contentType>
    </property>
    <property>
      <name>CSS</name>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>currentPage</use>
    </property>
  </object>
</xwikidoc>
