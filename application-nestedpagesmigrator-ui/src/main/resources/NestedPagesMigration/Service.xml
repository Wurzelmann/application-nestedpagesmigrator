<?xml version="1.0" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc version="1.2" reference="NestedPagesMigration.Service" locale="">
  <web>NestedPagesMigration</web>
  <name>Service</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <creationDate>1453133159000</creationDate>
  <parent>NestedPagesMigration.WebHome</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <date>1453143924000</date>
  <contentUpdateDate>1453143924000</contentUpdateDate>
  <version>1.1</version>
  <title/>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content>{{velocity wiki="false"}}
#************************************************************************
 * Controller
 ************************************************************************#
#set ($action = "$!request.action")
#if ($action == 'createPlan')
  #createPlan()
#elseif ($action == 'startBreakageDetection')
  #startBreakageDetection()
#elseif ($action == 'printPlan')
  #printPlan()
#elseif ($action == 'printBreakages')
  #printBreakages()
#elseif ($action == 'executePlan')
  #executePlan()
#elseif ($action == 'printStatusAndLogs')
  #printStatusAndLogs()
#elseif ($action == 'cleanPlan')
  #cleanPlan()
#end
#************************************************************************
 * Load configuration
 ************************************************************************#
#macro(loadConfiguration $configuration)
  #**
   * Transform the string parameter to a list of document references
   *#
  #macro(getDocumentReferencesFromString $value $result)
    #set ($references = [])
    #if ($stringtool.isNotBlank($value))
      #set ($values = $value.split(','))
      #foreach ($part in $values)
        #if ($stringtool.isNotBlank($part))
          #set ($reference = $services.model.resolveDocument($part))
          #set ($discard = $references.add($reference))
        #end
      #end
    #end
    #setVariable("$result", $references)
  #end
  #**
   * Transform the string parameter to a list of space references
   *#
  #macro(getSpaceReferencesFromString $value $result)
    #set ($references = [])
    #if ($stringtool.isNotBlank($value))
      #set ($values = $value.split(','))
      #foreach ($part in $values)
        #if ($stringtool.isNotBlank($part))
          #set ($reference = $services.model.resolveSpace($part))
          #set ($discard = $references.add($reference))
        #end
      #end
    #end
    #setVariable("$result" $references)
  #end
  ###
  ### Load the configuration
  ###
  #set ($configuration = $services.nestedpagesmigrator.newMigrationConfiguration($services.wiki.currentWikiId))
  #set ($excludeHiddenPages = "$!request.excludeHiddenPages" == 'true')
  #set ($excludeClassPages  = "$!request.excludeClassPages" == 'true')
  #set ($dontMoveChildren   = "$!request.dontMoveChildren" == 'true')
  #set ($addRedirection     = "$!request.addRedirection" == 'true')
  #set ($convertPreferences = "$!request.convertPreferences" == 'true')
  #set ($convertRights      = "$!request.convertRights" == 'true')
  #getDocumentReferencesFromString("$request.excludedObjectClasses", $excludedObjectClasses)
  #getDocumentReferencesFromString("$request.excludedPages", $excludedPages)
  #getSpaceReferencesFromString("$request.excludedSpaces", $excludedSpaces)
  #getSpaceReferencesFromString("$request.includedSpaces", $includedSpaces)
  #set ($discard = $configuration.setExcludeHiddenPages($excludeHiddenPages))
  #set ($discard = $configuration.setExcludeClassPages($excludeClassPages))
  #set ($discard = $configuration.setDontMoveChildren($dontMoveChildren))
  #set ($discard = $configuration.setAddAutoRedirect($addRedirection))
  #set ($discard = $configuration.setConvertPreferences($convertPreferences))
  #set ($discard = $configuration.setConvertRights($convertRights))
  #set ($discard = $configuration.addExcludedObjectClasses($excludedObjectClasses))
  #set ($discard = $configuration.addExcludedPages($excludedPages))
  #set ($discard = $configuration.addExcludedSpaces($excludedSpaces))
  #set ($discard = $configuration.addIncludedSpaces($includedSpaces))
#end
#************************************************************************
 * Create Plan
 ************************************************************************#
#macro(createPlan)
  ###
  ### Load the configuration
  ###
  #set ($configuration = $services.nestedpagesmigrator.newMigrationConfiguration($services.wiki.currentWikiId))
  #loadConfiguration($configuration)
  ###
  ### Start the job
  ###
  #set ($job = $services.nestedpagesmigrator.startMigrationPlanCreation($configuration))
  ###
  ### Print the job id
  ###
  #set ($map = {'jobId': $stringtool.join($job.request.id, '/')})
  #set ($discard = $response.setContentType('application/json'))
  $jsontool.serialize($map)
#end
#************************************************************************
 * Start Breakage Detection
 ************************************************************************#
#macro(startBreakageDetection)
  ###
  ### Load the configuration
  ###
  #set ($configuration = $services.nestedpagesmigrator.newMigrationConfiguration($services.wiki.currentWikiId))
  #loadConfiguration($configuration)
  ###
  ### Start the job
  ###
  #set ($job = $services.nestedpagesmigrator.startBreakageDetection($configuration))
  ###
  ### Print the job id
  ###
  #set ($map = {'jobId': $stringtool.join($job.request.id, '/')})
  #set ($discard = $response.setContentType('application/json'))
  $jsontool.serialize($map)
#end
#************************************************************************
 * Display the plan
 ************************************************************************#
#macro(printPlan)
  #set ($discard = $response.setContentType('application/json'))
  $services.nestedpagesmigrator.getSerializedPlan($services.wiki.currentWikiId)
#end
#************************************************************************
 * Display the breakage list
 ************************************************************************#
#macro(printBreakages)
  #set ($discard = $response.setContentType('application/json'))
  $services.nestedpagesmigrator.getSerializedBreakages($services.wiki.currentWikiId)
#end
#************************************************************************
 * Execute the plan
 ************************************************************************#
#macro(executePlan)
  ###
  ### Create the configuration
  ###
  #set ($configuration = $services.nestedpagesmigrator.newMigrationConfiguration($services.wiki.currentWikiId))
  #set ($addRedirection = "$!request.addRedirection" == 'true')
  #set ($discard = $configuration.setAddAutoRedirect($addRedirection))
  #set ($disabledActions = "$!request.disabledActions")
  ## We might have problem if ',' is used in the page name
  #foreach ($disabledAction in $disabledActions.split(','))
    #set ($discard = $configuration.addDisabledAction($disabledAction))
  #end
  ###
  ### Start the job
  ###
  #set ($job = $services.nestedpagesmigrator.startMigration($configuration, $request.plan))
  ###
  ### Print the job id
  ###
  #set ($map = {'jobId': $stringtool.join($job.request.id, '/')})
  #set ($discard = $response.setContentType('application/json'))
  $jsontool.serialize($map)
#end
#************************************************************************
 * Print the job status and its logs (because the REST service is not that
 * good in XWiki 7.4.2).
 ************************************************************************#
#macro(printStatusAndLogs)
  #set ($discard = $response.setContentType('application/json'))
  $services.nestedpagesmigrator.getStatusAndLogs($services.wiki.currentWikiId, $request.jobAction)
#end
#************************************************************************
 * Clean the plan
 ************************************************************************#
#macro(cleanPlan)
  $services.nestedpagesmigrator.cleanPlan($services.wiki.currentWikiId)
#end
{{/velocity}}
</content>
</xwikidoc>
